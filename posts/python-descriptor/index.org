#+BEGIN_COMMENT
.. title: Python描述符（Descriptor）
.. slug: python-descriptor
.. date: 2016-03-06
.. tags: python
.. category: 
.. link: 
.. description: 
.. type: text
#+END_COMMENT


先看一个例子，@property。被@property修饰的成员函数，将变为一个描述符。这是最简单的创建描述符的方式。
#+begin_src python :results output
class Foo:
  @property
  def attr(self):
    print('getting attr')
    return 'attr value'

  def bar(self): pass

foo = Foo()
#+end_src

#+RESULTS:
: (<type 'property'>, <type 'instancemethod'>)

上面这个例子中，attr是类Foo的一个成员函数，可通过语句foo.attr()被调用。
但当它被@property修饰后，这个成员函数将不再是一个函数，而变为一个描述符。bar是一个未被修饰的成员函数。
type(Foo.attr)与type(Foo.bar)的结果分别为：
#+BEGIN_SRC text
<type 'property'>
<type 'instancemethod'>
#+END_SRC
attr的类型为property（注：一个property类型的对象总是一个描述符），bar的类型为instancemethod，也即一个常规的成员函数。

此时attr将无法再被调用，当尝试调用它时，语句foo.attr()将抛出错误：
#+BEGIN_SRC text
TypeError: 'str' object is not callable
#+END_SRC
让我们来理解这个错误。

首先来看foo.attr的值：
#+BEGIN_SRC text
attr value
#+END_SRC
其类型type(foo.attr)：
#+BEGIN_SRC text
str
#+END_SRC
foo.attr的类型为str，因此便有了以上的错误，一个str对象无法被调用。其值为'attr value'，正好是原始attr函数的返回值。
因此语句foo.attr实际上触发了原始attr函数的调用，并且将函数的返回值作为其值。实际上语句print(foo.attr)的输出为：
#+BEGIN_SRC text
getting attr
attr value
#+END_SRC
进一步验证了执行语句foo.attr时，原始的attr函数被调用。

发生了什么？当执行一个访问对象属性的语句foo.attr时，结果一个函数调用被触发！这便是描述符的作用：将属性访问转变为函数调用，并由这个函数来控制这个属性的值（也即函数的返回值），以及在返回值前做定制化的操作。此时可以给描述符一个简要定义：
#+BEGIN_QUOTE
描述符是类的一个属性，控制类实例对象访问这个属性时如何返回值及做哪些额外操作
#+END_QUOTE

这留给程序员的空间是巨大的。。





NOTE: 以下为语音笔记，待整理


使用描述符控制python对象属性的访问。

蟒蛇中定义的所有，数据都可以，称之为，属性。比如函数和变量都是这个类的属性。具体细分一下函数是，非数据属性。而变量是数据属性。描述符用于控制变量的，获取设置和删除。根据属性的不同。描述符也可以进一步细分为数据描述，符合非数据描述符，分别用于控制，数据属性和函数属性。

* 描述符协议
任何一个对象只要提包含了get，set delete这三个函数，中的任意一个，那么它就是一个描述符.这三个函数分别控制，属性的获取设置和删除。


* 第一数据属性以及数据描述符。
默认情况下，数据属性的获取顺序为，第一从对象的字典中获取，第二从类字典中获取
。
该如果定义了一个类属性对象，并且这个对象是一个描述符，则获取这个属性是会优先从这个描述符，的各个方法中获取。


* 第二非数据属性。
静态函数，类函数都是通过描述符的方式实现的。在函数定义的时候，函数被保存在类的字典里，以一个普通的函数。函数的调用过程可以分为两个两个步骤。第一个是将函数获取出来，第二个是进行实际的调用。描述符是在第一个步骤中发挥作用。它会将，函数从类的字典中取出来，然后将类对象绑定为，第一个，参数。及成员函数的第一个参数及c f变量，都是在描述符中的钙函数中绑定的。
如果将函数的获取与调用看作两个不同的过程，则已向过则以上过程会，简化。函数本身就是一个描述符，他会返回一个新的函数，这个函数哪和原来的函数一样，但是，第一个参数会被设置为，会被设置为，对象本身。因此心身的函数，将接受的参数比原来的函数，少一个。因为函数本身也是一个描述符。


* 第三描述符的一些应用。


* 其他的一些。
描述服务提供了一个抽象城。这个层次控制性的，访问与设置。
所有函数是一个描述服。
累本身应该不是苗舒服。
